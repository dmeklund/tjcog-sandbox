{"version":3,"sources":["components/navbar.js","components/layout.js","pages/about.js","pages/housing101.js","App.js","serviceWorker.js","index.js"],"names":["Container","fluid","Navbar","bg","variant","Brand","href","Nav","className","Link","fill","Layout","children","About","class","style","width","Row","Col","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSAKe,oBACX,kBAACA,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,qCACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,0BACX,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,UAAf,YACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,YAAf,gBAGR,kBAACJ,EAAA,EAAD,CAAQC,GAAG,YAAYC,QAAQ,QAC3B,kBAACG,EAAA,EAAD,CAAKC,UAAU,yBAAyBE,MAAI,EAACN,QAAQ,SACjD,kBAACG,EAAA,EAAIE,KAAL,CAAUH,KAAK,KAAf,0BACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,kBAAf,kBACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,UAAf,sBACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,eAAf,wBACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,cAAf,aACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,gBAAf,gBACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,aAAf,qBACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,QAAf,aCZDK,EAPA,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACX,kBAACZ,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,MACCW,ICGMC,EAPD,kBACV,kBAACb,EAAA,EAAD,KACI,qCACA,uD,gBCHO,oBACX,kBAACA,EAAA,EAAD,KACI,yBAAKc,MAAM,OAAOC,MAAO,CAACC,MAAO,SAC7B,yBAAKF,MAAM,aACP,wBAAIA,MAAM,cAAV,0BACA,uBAAGN,UAAU,aACT,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,iTASA,kBAACA,EAAA,EAAD,yBCDTC,MAXf,WACE,OACI,kBAAC,EAAD,KACE,kBAAC,IAAD,KACI,kBAAC,EAAD,CAASC,KAAK,MACd,kBAAC,EAAD,CAAOA,KAAK,cCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ba1ba5c.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Container from \"react-bootstrap/Container\";\n\nexport default () => (\n    <Container fluid>\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">Triangle J Council of Governments</Navbar.Brand>\n            <Nav className=\"justify-content-center\">\n                <Nav.Link href=\"/about\">About Us</Nav.Link>\n                <Nav.Link href=\"/contact\">Contact Us</Nav.Link>\n            </Nav>\n        </Navbar>\n        <Navbar bg=\"secondary\" variant=\"dark\">\n            <Nav className=\"justify-content-center\" fill variant=\"pills\">\n                <Nav.Link href=\"/\">Affordable Housing 101</Nav.Link>\n                <Nav.Link href=\"/bestpractices\">Best Practices</Nav.Link>\n                <Nav.Link href=\"/local\">Find My Local Info</Nav.Link>\n                <Nav.Link href=\"/strategies\">Terms and Strategies</Nav.Link>\n                <Nav.Link href=\"/resourcse\">Resources</Nav.Link>\n                <Nav.Link href=\"/casestudies\">Case Studies</Nav.Link>\n                <Nav.Link href=\"/profiles\">Resident Profiles</Nav.Link>\n                <Nav.Link href=\"/FAQ\">FAQ's</Nav.Link>\n            </Nav>\n        </Navbar>\n    </Container>\n);\n","import React from \"react\";\nimport NavBar from \"./navbar\";\nimport {Container} from \"react-bootstrap\";\n\nconst Layout = ({children}) => (\n    <Container fluid>\n        <NavBar/>\n        {children}\n    </Container>\n);\n\nexport default Layout;","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\n\nconst About = () => (\n    <Container>\n        <h1>About</h1>\n        <p>This is the about page</p>\n    </Container>\n)\n\nexport default About;\n","import React from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\n\nexport default () => (\n    <Container>\n        <div class=\"card\" style={{width: \"100%\"}}>\n            <div class=\"card-body\">\n                <h3 class=\"card-title\">Affordable Housing 101</h3>\n                <p className=\"card-text\">\n                    <Row>\n                        <Col>\n                            To address the housing crisis through regional\n                            collaboration and mutual support, the Metropolitan\n                            Mayors Coalition (MMC) launched a Regional\n                            Housing Taskforce to establish a regional housing\n                            production goal and identify strategies to achieve\n                            that goal throughout the 15 participating\n                            communities.\n                        </Col>\n                        <Col>Image here</Col>\n                    </Row>\n                </p>\n            </div>\n        </div>\n    </Container>\n);","import React from 'react';\nimport { Router } from \"@reach/router\"\nimport './App.css';\nimport Layout from \"./components/layout\";\nimport About from \"./pages/about\";\nimport Housing from \"./pages/housing101\"\n\nfunction App() {\n  return (\n      <Layout>\n        <Router>\n            <Housing path=\"/\"/>\n            <About path=\"/about\"/>\n        </Router>\n      </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}